import { useState, useEffect } from "react";
import { useLocation, useNavigate, Link, useParams } from "react-router-dom";
import { ArrowLeft, Loader2, CheckCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";

// Interface for Razorpay's options object
interface RazorpayOptions {
    key: string; // Public API Key
    amount: string; // Amount in smallest unit (e.g., paise)
    currency: string;
    name: string;
    description: string;
    order_id: string; // Order ID generated by your backend
    handler: (response: any) => void;
    prefill: {
        name: string;
        email: string;
        contact: string;
    };
    theme: {
        color: string;
    };
}

// Ensure the Razorpay script is loaded
const loadRazorpayScript = (src: string) => {
    return new Promise((resolve) => {
        const script = document.createElement("script");
        script.src = src;
        script.onload = () => resolve(true);
        script.onerror = () => resolve(false);
        document.body.appendChild(script);
    });
};

const Checkout = () => {
    const navigate = useNavigate();
    const { planName: planParam } = useParams<{ planName?: string }>();
    const location = useLocation();
    const { toast } = useToast();

    // Use state to manage the checkout process
    const [isLoading, setIsLoading] = useState(true);
    const [isProcessing, setIsProcessing] = useState(false);
    const [status, setStatus] = useState<'pending' | 'success' | 'error' | 'idle'>('idle');
    const [error, setError] = useState<string | null>(null);

    // Get data passed from the Pricing page
    const fallbackPlanName = location.pathname.split('/').pop()?.replace('-', ' ');
    const planName = planParam ?? fallbackPlanName;
    const { price, period } = (location.state as any) || {};

    // Dummy user data (replace with actual context/auth data)
    const user = { 
        name: "Demo User", 
        email: "user@example.com", 
        phone: "9999999999" 
    }; 
    
    // Handle undefined price safely
    const amountInPaise = parseInt(String(price || '0'), 10) * 100; // Razorpay needs amount in smallest unit (paise)
    const displayAmount = price ? `â‚¹${price}` : "N/A";

    // IMPORTANT: Replace with your actual Public Razorpay Key
    const RAZORPAY_KEY = 'rzp_test_YOUR_KEY'; 
    // IMPORTANT: Replace with your actual Backend Order API endpoint
    const ORDER_API_URL = 'https://your-backend.com/api/create-order'; 
    // IMPORTANT: Replace with your actual Backend Verification API endpoint
    const VERIFY_API_URL = 'https://your-backend.com/api/verify-payment'; 
    
    // --- Razorpay Handler: Called after successful payment ---
    const handlePaymentSuccess = async (response: any) => {
        setIsProcessing(true);
        setStatus('pending');
        
        try {
            // Step 3: Send payment ID and signature to your backend for verification
            const verifyResponse = await fetch(VERIFY_API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    // Optionally pass user/plan ID for verification
                    userId: user.email, 
                    planName: planName,
                }),
            });

            const data = await verifyResponse.json();

            if (verifyResponse.ok && data.success) {
                setStatus('success');
                // TODO: Update user context/local storage with new Pro subscription status
                toast({
                    title: "Subscription Active!",
                    description: `You are now a ${planName} user. Welcome aboard!`,
                    variant: "default",
                });
                // Redirect user to the dashboard or a success page
                setTimeout(() => navigate("/dashboard"), 3000); 

            } else {
                setStatus('error');
                setError(data.message || "Payment verification failed. Please contact support.");
            }

        } catch (err) {
            setStatus('error');
            setError("A network error occurred during verification.");
        } finally {
            setIsProcessing(false);
        }
    };

    // --- Core Payment Logic: Initiates the entire flow ---
    const initiatePayment = async () => {
        setIsLoading(true);
        setError(null);
        
        const res = await loadRazorpayScript("https://checkout.razorpay.com/v1/checkout.js");

        if (!res) {
            setIsLoading(false);
            setError("Razorpay SDK failed to load. Are you connected to the internet?");
            return;
        }

        try {
            // Step 1: Create Order on Your Backend
            const orderResponse = await fetch(ORDER_API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    amount: amountInPaise,
                    currency: "INR",
                    plan: planName,
                    userId: user.email,
                }),
            });

            const orderData = await orderResponse.json();

            if (!orderResponse.ok || !orderData.id) {
                setError(orderData.message || "Failed to create payment order on the server.");
                setIsLoading(false);
                return;
            }

            // Step 2: Open Razorpay Checkout Popup
            const options: RazorpayOptions = {
                key: RAZORPAY_KEY, 
                amount: amountInPaise.toString(),
                currency: "INR",
                name: "Vinathaal",
                description: `${planName} Plan Subscription`,
                order_id: orderData.id, 
                handler: handlePaymentSuccess,
                prefill: {
                    name: user.name,
                    email: user.email,
                    contact: user.phone,
                },
                theme: {
                    color: "#4f46e5", // Indigo theme color
                },
            };

            const paymentObject = new (window as any).Razorpay(options);
            paymentObject.on('payment.failed', function (response: any){
                setError("Payment failed: " + response.error.description);
                setStatus('error');
            });
            paymentObject.open();

        } catch (e) {
            setError("An unexpected error occurred during checkout.");
            setStatus('error');
        } finally {
            setIsLoading(false);
        }
    };
    
    // Automatically start payment when component loads if data is valid
    useEffect(() => {
        if (!planName || !price) {
            setError("Plan details are missing. Redirecting to pricing...");
            setTimeout(() => navigate("/pricing"), 2000);
            return;
        }
        if (status === 'idle') {
            initiatePayment();
        }
    }, [planName, price, status, navigate]);


    // Render states
    const renderContent = () => {
        if (isLoading) {
            return (
                <div className="flex flex-col items-center justify-center p-8">
                    <Loader2 className="w-8 h-8 text-indigo-500 animate-spin mb-4" />
                    <p className="text-lg font-medium text-slate-700">Preparing your secure checkout...</p>
                    <p className="text-sm text-slate-500 mt-2">Please wait while we load the payment gateway.</p>
                </div>
            );
        }
        
        if (status === 'success') {
            return (
                <div className="flex flex-col items-center justify-center p-8 text-center text-green-600">
                    <CheckCircle className="w-12 h-12 mb-4" />
                    <p className="text-xl font-bold">Payment Successful!</p>
                    <p className="text-slate-600 mt-2">Your <strong>{planName}</strong> subscription is now active.</p>
                    <Link to="/dashboard" className="mt-4 text-indigo-600 hover:underline">Go to Dashboard</Link>
                </div>
            );
        }

        if (error) {
            return (
                <div className="flex flex-col items-center justify-center p-8 text-center">
                    <p className="text-lg font-medium text-red-600">Payment Error</p>
                    <p className="text-sm text-slate-500 mt-2">{error}</p>
                    <Button onClick={initiatePayment} className="mt-4 bg-indigo-600 hover:bg-indigo-700">Try Again</Button>
                    <Link to="/pricing" className="mt-4 text-indigo-600 hover:underline text-sm">Cancel and go back</Link>
                </div>
            );
        }

        if (isProcessing) {
             return (
                <div className="flex flex-col items-center justify-center p-8">
                    <Loader2 className="w-8 h-8 text-indigo-500 animate-spin mb-4" />
                    <p className="text-lg font-medium text-slate-700">Verifying Payment...</p>
                    <p className="text-sm text-slate-500 mt-2">Do not close this window.</p>
                </div>
            );
        }

        // Fallback for when the Razorpay popup is open but the page is visible
        return (
            <div className="flex flex-col items-center justify-center p-8 text-center">
                <p className="text-xl font-bold text-slate-900">Awaiting Payment</p>
                <p className="text-slate-600 mt-2">Please complete the transaction in the pop-up window.</p>
                <p className="text-sm text-slate-500 mt-4">If the pop-up didn't appear, please check your browser settings.</p>
                <Button onClick={initiatePayment} className="mt-4 bg-indigo-600 hover:bg-indigo-700">Re-launch Payment Window</Button>
            </div>
        );
    };

    return (
        <div className="min-h-screen bg-slate-50 flex flex-col items-center pt-20">
            {/* Simple Navigation Header */}
            <header className="fixed top-0 w-full bg-white shadow-md z-10">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-16 flex items-center">
                    <Link to="/pricing" className="flex items-center space-x-2 text-slate-700 hover:text-slate-900 transition">
                        <ArrowLeft className="w-5 h-5" />
                        <span className="text-base font-medium">Change Plan</span>
                    </Link>
                </div>
            </header>

            <Card className="w-full max-w-lg mx-auto shadow-2xl">
                <CardHeader className="text-center bg-indigo-50 border-b">
                    <CardTitle className="text-2xl font-bold text-indigo-600">{planName} Checkout</CardTitle>
                    <CardDescription className="text-xl font-extrabold text-slate-900">
                        {displayAmount} <span className="text-base font-normal text-slate-600">/ {period}</span>
                    </CardDescription>
                </CardHeader>
                <CardContent className="p-0">
                    {renderContent()}
                </CardContent>
            </Card>

            <p className="text-sm text-slate-500 mt-6 pb-20">Powered by Razorpay. All transactions are 100% secure.</p>
        </div>
    );
};

export default Checkout;